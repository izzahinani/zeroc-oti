[{"/Users/Ii/Desktop/Work/ZeroC_OTI/zeroc-oti/src/client/pages/_app.js":"1","/Users/Ii/Desktop/Work/ZeroC_OTI/zeroc-oti/src/client/pages/api/climatiq/orgadmin/__getAllDropdowns.js":"2","/Users/Ii/Desktop/Work/ZeroC_OTI/zeroc-oti/src/client/pages/api/climatiq/orgadmin/getSearch.js":"3","/Users/Ii/Desktop/Work/ZeroC_OTI/zeroc-oti/src/client/pages/index.js":"4","/Users/Ii/Desktop/Work/ZeroC_OTI/zeroc-oti/src/client/pages/orgadmin/location.js":"5","/Users/Ii/Desktop/Work/ZeroC_OTI/zeroc-oti/src/client/components/Datapoints/Query.js":"6","/Users/Ii/Desktop/Work/ZeroC_OTI/zeroc-oti/src/client/components/Datapoints/TableResults.js":"7","/Users/Ii/Desktop/Work/ZeroC_OTI/zeroc-oti/src/client/components/Datapoints/index.js":"8","/Users/Ii/Desktop/Work/ZeroC_OTI/zeroc-oti/src/client/components/UI/Loader/index.js":"9"},{"size":429,"mtime":1659918811916,"results":"10","hashOfConfig":"11"},{"size":1432,"mtime":1659823066106,"results":"12","hashOfConfig":"11"},{"size":1853,"mtime":1659915963448,"results":"13","hashOfConfig":"11"},{"size":139,"mtime":1659926406283,"results":"14","hashOfConfig":"11"},{"size":165,"mtime":1659821938879,"results":"15","hashOfConfig":"11"},{"size":4518,"mtime":1659926406919,"results":"16","hashOfConfig":"11"},{"size":4278,"mtime":1659917078999,"results":"17","hashOfConfig":"11"},{"size":5519,"mtime":1659922449420,"results":"18","hashOfConfig":"11"},{"size":372,"mtime":1659854209106,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1un05a0",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Ii/Desktop/Work/ZeroC_OTI/zeroc-oti/src/client/pages/_app.js",[],[],"/Users/Ii/Desktop/Work/ZeroC_OTI/zeroc-oti/src/client/pages/api/climatiq/orgadmin/__getAllDropdowns.js",[],[],"/Users/Ii/Desktop/Work/ZeroC_OTI/zeroc-oti/src/client/pages/api/climatiq/orgadmin/getSearch.js",[],[],"/Users/Ii/Desktop/Work/ZeroC_OTI/zeroc-oti/src/client/pages/index.js",[],[],"/Users/Ii/Desktop/Work/ZeroC_OTI/zeroc-oti/src/client/pages/orgadmin/location.js",[],[],"/Users/Ii/Desktop/Work/ZeroC_OTI/zeroc-oti/src/client/components/Datapoints/Query.js",[],[],"/Users/Ii/Desktop/Work/ZeroC_OTI/zeroc-oti/src/client/components/Datapoints/TableResults.js",[],[],"/Users/Ii/Desktop/Work/ZeroC_OTI/zeroc-oti/src/client/components/Datapoints/index.js",["48","49"],[],"import axios from \"axios\";\nimport { useEffect, useState, useCallback } from \"react\";\nimport Loader from \"../UI/Loader\";\nimport TableResults from \"./TableResults\";\nimport Query from \"./Query\";\n\nconst INITIAL_STATE = {\n  current_page: 1,\n  last_page: 753,\n  total_results: 15051,\n  results: [\n    {\n      access_type: \"public\",\n      activity_id: \"accommodation_type_holiday\",\n      category: \"Accommodation\",\n      constituent_gases: { co2e_total: 0.425, co2e_other: null, co2: null },\n      data_quality_flags: [],\n      description:\n        \"Emission intensity of supply chain in GBP spend on: holiday in the uk/ holiday abroad/ room hire. In actual prices in Â£s and including VAT. Provided by BEIS/DEFRA in the official report on GHG Emissions of the UK between 1996-2018. Where source emission factors are identical across a variety of activities they have been grouped to avoid confusion - details are documented in the OEFDB data guidance.\",\n      factor: 0.425,\n      factor_calculation_method: \"ar4\",\n      factor_calculation_origin: \"source\",\n      id: \"accommodation_type_holiday\",\n      lca_activity: \"unknown\",\n      name: \"Holiday (travel/accommodation)\",\n      region: \"GB\",\n      region_name: \"United Kingdom\",\n      sector: \"Restaurants and Accommodation\",\n      source: \"BEIS\",\n      source_link: \"https://www.gov.uk/government/statistics/uks-carbon-footprint\",\n      supported_calculation_methods: [\"ar4\"],\n      uncertainty: null,\n      unit: \"kg/GBP\",\n      unit_type: [\"Money\"],\n      uuid: \"5c37ee77-488d-4a21-83d7-7c06656eb0ff\",\n      year: \"2018\",\n    },\n  ],\n  possible_filters: {\n    category: [\"\"],\n    region: [{ id: \"\", name: \"\" }],\n    sector: [\"\"],\n    source: [\"\"],\n    unit_type: [\"\"],\n    year: [\"\"],\n  },\n};\n\nconst INITIAL_QUERY_STATE = {\n  category: [],\n  region: [],\n  sector: [],\n  source: [],\n  unit_type: [],\n  year: [],\n  query: \"\", //user can append + to search, need to slice\n  page: \"1\",\n};\n\nfunction Datapoints() {\n  const [state, setState] = useState(INITIAL_STATE);\n  const [checkedResults, setCheckedResults] = useState({}); //{uuid: {...}, {uuid2: {...}, }}\n  const [confirmedResults, setConfirmedResults] = useState({});\n  const [query, setQuery] = useState(INITIAL_QUERY_STATE);\n  const [firstRender, setFirstRender] = useState(true);\n\n  const [ui, setUi] = useState({\n    isLoading: false,\n    message: {\n      type: \"\", //\"success / error\"\n      message: \"\",\n    },\n  });\n\n  // =========================(A) FETCH API ON FIRST LOAD=================================//\n  useEffect(() => {\n    if (!firstRender) {\n      return;\n    }\n    (async () => {\n      try {\n        setUi((prev) => ({ ...prev, isLoading: true }));\n        const { data } = await axios.get(\"/api/climatiq/orgadmin/getSearch\");\n        console.log(\"data\", data);\n        setState(data); //to set initial render state\n        setUi((prev) => ({ ...prev, isLoading: false, message: { type: \"success\", message: \"Successfully fetched\" } }));\n      } catch (err) {\n        setUi((prev) => ({ ...prev, isLoading: false, message: { type: \"error\", message: err.message } }));\n      }\n    })();\n  }, []);\n\n  // =========================(B) TO SET TIMEOUT FOR SUCCESS MESSAGE=================================//\n  const {\n    message: { type },\n  } = ui;\n  useEffect(() => {\n    if (type) {\n      const timerPointer = setTimeout(() => {\n        setUi((prev) => ({ ...prev, message: { type: \"\", message: \"\" } }));\n      }, 1000);\n      return () => clearTimeout(timerPointer);\n    }\n  }, [type]);\n\n  // ========================(C) TO handle submit query to backend ==================================//\n  const getQueryAPI = useCallback(async () => {\n    try {\n      setUi((prev) => ({ ...prev, isLoading: true }));\n      console.log(\"query\", query);\n      const { data } = await axios.post(\"/api/climatiq/orgadmin/getSearch\", {\n        body: JSON.stringify(query),\n      });\n      console.log(\"data\", data);\n      setState((prev) => ({\n        ...data,\n        possible_filters: { ...prev.possible_filters },\n      }));\n      setUi((prev) => ({ ...prev, isLoading: false, message: { type: \"success\", message: \"Successfully queried\" } }));\n    } catch (err) {\n      setUi((prev) => ({ ...prev, isLoading: false, message: { type: \"error\", message: err.message } }));\n    }\n  }, [query, setState, setUi]);\n\n  // =========================USEEFFECT: if detects query, change, call getQueryAPI=================================//\n  useEffect(() => {\n    if (firstRender) {\n      setFirstRender(false);\n      return;\n    }\n    const timerPointer = setTimeout(() => getQueryAPI(), [1000]);\n    () => clearTimeout(timerPointer);\n  }, [query, getQueryAPI]);\n\n  // =========================UI LOADER=================================//\n  if (ui.isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      {ui.message.type && (\n        <div style={{ backgroundColor: ui.message.type === \"success\" ? \"green\" : \"red\" }}>\n          <p>{ui.message.message}</p>\n        </div>\n      )}\n      <h1>Datapoints</h1>\n      <Query setState={setState} setUi={setUi} state={state} query={query} setQuery={setQuery} getQueryAPI={getQueryAPI} />\n      {state.results.length === 0 ? (\n        <div> NO RESULTS</div>\n      ) : (\n        <TableResults\n          results={state.results}\n          checkedResults={checkedResults}\n          confirmedResults={confirmedResults}\n          setCheckedResults={setCheckedResults}\n          setConfirmedResults={setConfirmedResults}\n        />\n      )}\n    </>\n  );\n}\n\nexport default Datapoints;\n","/Users/Ii/Desktop/Work/ZeroC_OTI/zeroc-oti/src/client/components/UI/Loader/index.js",[],[],{"ruleId":"50","severity":1,"message":"51","line":91,"column":6,"nodeType":"52","endLine":91,"endColumn":8,"suggestions":"53"},{"ruleId":"50","severity":1,"message":"51","line":133,"column":6,"nodeType":"52","endLine":133,"endColumn":26,"suggestions":"54"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'firstRender'. Either include it or remove the dependency array.","ArrayExpression",["55"],["56"],{"desc":"57","fix":"58"},{"desc":"59","fix":"60"},"Update the dependencies array to be: [firstRender]",{"range":"61","text":"62"},"Update the dependencies array to be: [query, getQueryAPI, firstRender]",{"range":"63","text":"64"},[3111,3113],"[firstRender]",[4632,4652],"[query, getQueryAPI, firstRender]"]